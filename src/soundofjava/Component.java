/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package soundofjava;

import java.util.ArrayList;

/**
 *
 * @author Jonathon Zeitler
 */
abstract class Component implements Chainable {
    
    protected ArrayList<ChainPort> inputs;      // input ChainPort objects
    protected ArrayList<ChainPort> outputs;     // output ChainPort objects
    protected ArrayList<Double> inputSamples;   // input samples by port
    protected ArrayList<Double> outputSamples;  // output samples by port
    protected ArrayList<String> inputPorts;     // input port names
    protected ArrayList<String> outputPorts;    // output port names
    protected boolean generateActive;           // true if actively generating
    
    /**
     * A simple data struct for containing a Chainable/port combination
     */
    protected class ChainPort {
        public Chainable chainable; // Chainable object
        public int port;            // port number
        
        /**
         * Constructor taking the two necessary values
         * 
         * @param c Chainable object
         * @param p port number
         */
        ChainPort(Chainable c, int p) {
            chainable = c;
            port = p;
        }
    }
    
    /**
     * Default constructor, adds a single input and single output named
     * "Primary"
     */
    Component() {
        inputs = new ArrayList<>();
        outputs = new ArrayList<>();
        inputSamples = new ArrayList<>();
        outputSamples = new ArrayList<>();
        inputPorts = new ArrayList<>();
        outputPorts = new ArrayList<>();
        
        generateActive = true;
        
        addInputPort("Primary");
        addOutputPort("Primary");
    }
    
    /**
     * Indicates whether this Component is actively generating
     * 
     * @return true if actively generating
     */
    @Override
    public boolean isGenerating() { return generateActive; }
    
    /**
     * Creates a new input port, for use by child class constructors
     * 
     * @param portName  descriptor for new input port
     * @return          port number of newly added port
     */
    protected final int addInputPort(String portName) {
        inputs.add(null);
        inputSamples.add(0.0);
        inputPorts.add(portName);
        return inputPorts.size()-1;
    }
    
    /**
     * Creates a new output port, for use by child class constructors
     * 
     * @param portName  descriptor for new output port
     * @return          port number of newly added port
     */
    protected final int addOutputPort(String portName) {
        outputs.add(null);
        outputSamples.add(0.0);
        outputPorts.add(portName);
        return outputPorts.size()-1;
    }
    
    /**
     * Abstract function which will define default behavior for generating
     * a single sample when no port is specified
     * 
     * @return  the generated sample for default output
     */
    @Override
    public abstract double generate();
    
    /**
     * Abstract function which defines how samples are generated for
     * each output
     * 
     * @param outputPort    output port number for which to generate a sample
     * @return              the sample generated for the specified output
     */
    @Override
    public abstract double generate(int outputPort);
    
    /**
     * Simply fetches the next sample from an input, intended to simplify
     * gathering inputs in child classes
     * 
     * @param inputPort the input port number from which to fetch a sample
     * @return          the sample generated by the specified input
     */
    protected final double generateInput(int inputPort) {
        ChainPort port = inputs.get(inputPort);
        if (port == null) { return 0.0; }
        return port.chainable.generate(port.port);
    }
    
    /**
     * Signals this component to provide samples when generate is called
     */
    @Override
    public void start() { generateActive = true; }
    
    /**
     * Signals this component to bypass or generate 0s when generate is called
     */
    @Override
    public void stop() { generateActive = false; }
    
    /**
     * Connects an output port from this Component to an input of another
     * Chainable
     * 
     * @param dest       the Chainable to connect an output to
     * @param sourcePort the output port to connect
     * @param destPort   the input port to connect to
     * @return           true if successful
     */
    @Override
    public boolean connectTo(Chainable dest, int sourcePort, int destPort) {
        if (outputAvailable(sourcePort)
                && dest.inputAvailable(destPort)) {
            outputs.set(sourcePort, new ChainPort(dest,destPort));
            return dest.accept(this, sourcePort, destPort);
        } else {
            return false;
        }
    }
    
    /**
     * Connects default output from this Component to an input of another
     * Chainable
     * 
     * @param dest       the Chainable to connect an output to
     * @param destPort   the input port to connect to
     * @return           true if successful
     */
    @Override
    public boolean connectTo(Chainable dest, int destPort) {
        return connectTo(dest, 0, destPort);
    }
    
    /**
     * Connects output to another Chainable's input according to default
     * behavior
     * 
     * @param dest  the Chainable to connect output to
     * @return      true if successful
     */
    @Override
    public boolean connectTo(Chainable dest) {
        return connectTo(dest, 0, 0);
    }
    
    /**
     * Takes an output port from another Chainable to an input of this
     * Component. Is called by the source's ConnectTo to achieve the other end
     * of the connection.
     * 
     * @param source     the Chainable to connect an input from
     * @param sourcePort the output port to connect
     * @param destPort   the input port to connect to
     * @return           true if successful
     */
    @Override
    public boolean accept(Chainable source, int sourcePort, int destPort) {
        inputs.set(destPort, new ChainPort(source,sourcePort));
        return true;
    }
    
    /**
     * Clears the specified input port
     * 
     * @param destPort   the input port to clear
     * @return           true if successful
     */
    @Override
    public boolean discard(int destPort) {
        if (destPort<inputs.size()) {
            inputs.set(destPort, null);
            return true;
        } else {
            return false;
        }
    }

    /**
     * Removes any current connection to specified input port
     *
     * @param inputPort the input port to disconnect
     * @return          true if successful
     */
    @Override
    public boolean disconnectInput(int inputPort) {
        Chainable source = inputs.get(inputPort).chainable;
        int outputPort = inputs.get(inputPort).port;
        return source.disconnectOutput(outputPort);
    }

    /**
     * Disconnects input according to default behavior
     * 
     * @return  true if successful
     */
    @Override
    public boolean disconnectInput() {
        return disconnectInput(0);
    }

    /**
     * Removes any current connection from specified output port
     * 
     * @param outputPort    the output port to disconnect
     * @return              true if successful
     */
    @Override
    public boolean disconnectOutput(int outputPort) {
        if (outputPort<outputs.size()) {
            if (outputs.get(outputPort) == null) return true;
            Chainable source = outputs.get(outputPort).chainable;
            int inputPort = outputs.get(outputPort).port;
            outputs.set(outputPort,null);
            return source.discard(inputPort);
        } else {
            return false;
        }
    }

    /**
     * Disconnects output according to default behavior
     */
    @Override
    public void disconnectOutput() {
        disconnectOutput(0);
    }
    
    /**
     * Returns a list of descriptors for this Component's input ports, port
     * number corresponds to index in the list
     * 
     * @return  ArrayList of input port descriptors
     */
    @Override
    public ArrayList<String> getInputs() {
        return inputPorts;
    }

    /**
     * Returns a list of descriptors for this Chainable's output ports, port
     * number corresponds to index in the list
     * 
     * @return  ArrayList of output port descriptors
     */
    @Override
    public ArrayList<String> getOutputs() {
        return outputPorts;
    }
    
    /**
     * Returns whether specified input port number is available for connection
     * 
     * @param inputPort input port number to check
     * @return          true if input port exists and is not connected
     */
    @Override
    public boolean inputAvailable(int inputPort) {
        return (inputPort<inputs.size() && inputs.get(inputPort)==null);
    }
    
    /**
     * Returns whether default input is available
     * 
     * @return  true if default input is available
     */
    @Override
    public boolean inputAvailable() {
        return inputAvailable(0);
    }
    
    /**
     * Returns whether specified output port number is available for connection
     * 
     * @param outputPort    output port number to check
     * @return              true if output port exists and is not connected
     */
    @Override
    public boolean outputAvailable(int outputPort) {
        return (outputPort<outputs.size() && outputs.get(outputPort)==null);
    }
    
    /**
     * Returns whether default output is available
     * 
     * @return  true if default output is available
     */
    @Override
    public boolean outputAvailable() {
        return outputAvailable(0);
    }
}
